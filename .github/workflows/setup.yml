name: Node Manager reusable workflows - Setup

on:
  workflow_call:
    inputs:
      branch-ref:
        required: true
        type: string
      node-version:
        required: false
        type: string
        default: 16
      os:
        required: false
        type: string
        default: ubuntu-latest
      access-needed:
        required: false
        type: string
      direct-static-stuff:
        required: false
        type: string
      direct-staticgroup-stuff:
        required: false
        type: string
      direct-unrelated-stuff:
        required: false
        type: string
    secrets:
      yoyoyo:
        required: false
      nonono:
        required: false
      insult:
        required: false
env:
  public-registry: ${{ inputs.access-needed == 'public-registry' }}
  private-sparks: ${{ inputs.access-needed == 'private-sparks' }}
  no-access: ${{ inputs.access-needed != 'public-registry' && inputs.access-needed != 'private-sparks' }}
  yoyoyo: ${{ secrets.yoyoyo }}
  nonono: ${{ secrets.nonono }}
  insult: ${{ secrets.insult }}

jobs:
  setup:
    name: Setup for Node.js ${{ inputs.node-version }} [github-node-manager-reusable-workflows/setup]
    runs-on: ${{ inputs.os }}

    steps:
      - name: DEBUG
        shell: bash
        run: |
          echo "secrets.yoyoyo           = || ${{ secrets.yoyoyo }} ||"
          echo "secrets.nonono           = || ${{ secrets.nonono }} ||"
          echo "secrets.insult           = || ${{ secrets.insult }} ||"
          echo "direct-clean-stuff       = || ${{ inputs.direct-clean-stuff }} ||"
          echo "direct-static-stuff      = || ${{ inputs.direct-static-stuff }} ||"
          echo "direct-group-stuff       = || ${{ inputs.direct-group-stuff }} ||"
          echo "direct-staticgroup-stuff = || ${{ inputs.direct-staticgroup-stuff }} ||"
          echo "direct-unrelated-stuff   = || ${{ inputs.direct-unrelated-stuff }} ||"
          echo "env-clean-stuff          = || ${{ inputs.env-clean-stuff }} ||"
          echo "env-static-stuff         = || ${{ inputs.env-static-stuff }} ||"
          echo "env-group-stuff          = || ${{ inputs.env-group-stuff }} ||"
          echo "env-staticgroup-stuff    = || ${{ inputs.env-staticgroup-stuff }} ||"
          echo "env-unrelated-stuff      = || ${{ inputs.env-unrelated-stuff }} ||"

      - name: DEBUG - STATIC COMPARE
        if: ${{ env.yoyoyo == 'slim marshall mathers' }}
        shell: bash
        run: |
          echo "static compare works"

      - name: DEBUG - ISN'T STARS
        if: ${{ env.yoyoyo != '***' }}
        shell: bash
        run: |
          echo "not stars"

      - name: DEBUG - SHOULD SKIP
        if: ${{ env.yoyoyo == '***' }}
        shell: bash
        run: |
          echo "stars"

      - name: ENV - STATIC COMPARE
        if: ${{ env.nonono == 'slim marshall mathers' }}
        shell: bash
        run: |
          echo "static compare works"

      - name: ENV - ISN'T STARS
        if: ${{ env.nonono != '***' }}
        shell: bash
        run: |
          echo "not stars"

      - name: ENV - SHOULD SKIP
        if: ${{ env.nonono == '***' }}
        shell: bash
        run: |
          echo "stars"

      - name: INSULT - STATIC COMPARE
        if: ${{ env.insult == 'ta mÃ¨re' }}
        shell: bash
        run: |
          echo "static compare works"

      - name: INSULT - ISN'T STARS
        if: ${{ env.insult != '***' }}
        shell: bash
        run: |
          echo "not stars"

      - name: INSULT - SHOULD SKIP
        if: ${{ env.insult == '***' }}
        shell: bash
        run: |
          echo "stars"

#      - name: Checkout repository ${{ inputs.branch-ref }}
#        uses: actions/checkout@v3
#        with:
#          ref: ${{ inputs.branch-ref }}
#          token: ${{ secrets.GLOBAL_ACCESS_TOKEN }}
#
#      # No access needed
#      - name: Install Node.js ${{ inputs.node-version }}
#        if: ${{ env.no-access == 'true' }}
#        uses: actions/setup-node@v3
#        with:
#          node-version: ${{ inputs.node-version }}
#
#      # Public registry access
#      - name: Install Node.js ${{ inputs.node-version }} with public registry access
#        if: ${{ env.public-registry == 'true' }}
#        uses: actions/setup-node@v3
#        with:
#          node-version: ${{ inputs.node-version }}
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.NPMRC_NPMJS_REGISTRY_TOKEN }}
#
#      # Private Sparks access
#      - name: Install Node.js ${{ inputs.node-version }} with private Sparks access
#        if: ${{ env.private-sparks == 'true' }}
#        uses: actions/setup-node@v3
#        with:
#          node-version: ${{ inputs.node-version }}
##          scope: ${{ secrets.JFROG_ARTIFACTORY_NPM_SPARKS_SCOPE }}
##          registry-url: ${{ secrets.JFROG_ARTIFACTORY_NPM_SPARKS_REGISTRY }}
##        env:
##          NODE_AUTH_TOKEN: ${{ secrets.JFROG_ARTIFACTORY_NPM_SPARKS_TOKEN }}
#
#      # Patch step for JFrog Artifactory that uses _auth instead of standard _authToken
#      - name: Generate .npmrc for JFrog Artifactory
#        if: ${{ env.private-sparks == 'true' }}
#        shell: bash
#        run: |
#          SCOPE=${{ secrets.JFROG_ARTIFACTORY_NPM_SPARKS_SCOPE }}
#          REGISTRY=${{ secrets.JFROG_ARTIFACTORY_NPM_SPARKS_REGISTRY }}
#          AUTH=${{ secrets.JFROG_ARTIFACTORY_NPM_SPARKS_AUTH }}
#          echo "${SCOPE}:registry=${REGISTRY}" >> .npmrc
#          echo "//${REGISTRY##*//}:_auth=${AUTH}" >> .npmrc
#
#      - name: DEBUG
#        shell: bash
#        run: |
#          echo "public-registry: ${{ env.public-registry }}"
#          echo "private-sparks: ${{ env.private-sparks }}"
#          echo "no-access: ${{ env.no-access }}"
#
#      - name: Install dependencies
#        run: npm ci
#
#      - name: Create cache
#        uses: actions/cache@v3
#        id: checkout-repository-cache
#        with:
#          path: ./*
#          key: checkout-repository-cache-${{ github.sha }}
